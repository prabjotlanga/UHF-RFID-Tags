
// Import the API
package samples;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import javax.swing.JFrame;
import javax.swing.JPanel;
import com.thingmagic.*;
import java.awt.event.ActionListener;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.EnumSet;
import java.util.HashSet;
import java.util.Set;
import javax.swing.JPanel;
import javax.swing.Timer;



import java.util.*;
import com.thingmagic.*;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.awt.Color;
import java.awt.Graphics;
import javax.swing.JFrame;
import java.awt.Graphics2D;
import javax.swing.JPanel;
import java.util.Scanner;
import java.awt.Rectangle;
import javax.swing.*;
import java.awt.event.ActionEvent;
import java.awt.event.*;
import java.awt.event.ActionListener;
import java.awt.geom.Rectangle2D;
import javax.swing.Timer;
public class read extends JPanel implements ActionListener {
    int y1 = 0, y2 = 0, y3 = 0, y4 = 0, y5 = 0, y6 = 0, y7 = 0, y9 = 0, z = 0;
    String s1 = "", s2 = "";
    int sl;
    Timer t = new Timer(1, this);
    public void paint(Graphics g) {
        super.paintComponent(g);
        Graphics2D g2 = (Graphics2D) g;
        Rectangle2D sq1 = new Rectangle2D.Double(500, y1, 20, 20);
        g2.setPaint(Color.GREEN);
        g2.fill(sq1);
        t.start();
        Color customColor = new Color(10, 10, 255);
        g.setColor(customColor);
        g.drawLine(350, 800, 650, 800);
        g.drawLine(0, 0, 465, 800);
        g.drawLine(1000, 0, 570, 800);
        g.setColor(Color.red);
        g.drawArc(465, 750, 100, 95, 0, 180);
        g.drawArc(465, 770, 100, 95, 0, 180);
        g.setColor(Color.orange);
        g.drawArc(200, 200, 615, 300, 0, 180);
        g.drawArc(330, 500, 350, 150, 0, 180);
        int fontSize = 20;
        g.setFont(new Font("TimesRoman", Font.PLAIN, fontSize));
        g.setColor(Color.black);
        g.drawString("Antenna", 480, 840);
        g.drawString("3 Meters", 250, 600);
        g.drawString("6 Meters", 100, 350);
        Rectangle2D sq2 = new Rectangle2D.Double(500, y2, 20, 20);
        g2.setPaint(Color.RED);

        

        g2.fill(sq2);
        Rectangle2D sq3 = new Rectangle2D.Double(500, y3, 20, 20);
        g2.setPaint(Color.BLUE);
        g2.fill(sq3);
        Rectangle2D sq4 = new Rectangle2D.Double(500, y4, 20, 20);
        g2.setPaint(Color.YELLOW);
        g2.fill(sq4);
        Rectangle2D sq5 = new Rectangle2D.Double(500, y5, 20, 20);
        g2.setPaint(Color.ORANGE);
        g2.fill(sq5);
        Rectangle2D sq6 = new Rectangle2D.Double(500, y6, 20, 20);
        g2.setPaint(Color.PINK);
        g2.fill(sq6);
        Rectangle2D sq7 = new Rectangle2D.Double(500, y7, 20, 20);
        g2.setPaint(Color.GRAY);
        g2.fill(sq7);
    }
    public void actionPerformed(ActionEvent e) {
        Scanner scan = new Scanner(System.in);
        repaint();
        s1 = scan.next();
        if (s1.startsWith("y1.")) {
            s2 = s1.substring(3);
            y1 = Integer.parseInt(s2);
        }
        if (s1.startsWith("y2.")) {
            s2 = s1.substring(3);
            y2 = Integer.parseInt(s2);
        }
        if (s1.startsWith("y3.")) {
            s2 = s1.substring(3);
            y3 = Integer.parseInt(s2);
        }
        if (s1.startsWith("y4.")) {
            s2 = s1.substring(3);
            y4 = Integer.parseInt(s2);
        }
        if (s1.startsWith("y5.")) {
            s2 = s1.substring(3);
            y5 = Integer.parseInt(s2);
        }
        if (s1.startsWith("y6.")) {
            s2 = s1.substring(3);
            y6 = Integer.parseInt(s2);
        }
        if (s1.startsWith("y7.")) {
            s2 = s1.substring(3);
            y7 = Integer.parseInt(s2);
        }
    }
    static void usage() {

        

        System.out.printf("Usage: Please provide valid arguments, such as:\n" +
            " (URI: 'tmr:///COM1 --ant 1,2' or 'tmr://astra-2100d3/

            --ant 1, 2 ' "

            +
            "or 'tmr:///dev/ttyS0 --ant 1,2')\n\n");

        System.exit(1);
    }
    public static void setTrace(Reader r, String args[]) {
        if (args[0].toLowerCase().equals("on")) {
            r.addTransportListener(r.simpleTransportListener);
        }
    }
    public static void main(String argv[]) {
            // Program setup
            read s = new read();
            JFrame frame = new JFrame("Java GUI Demo_ Read.java");
            frame.add(s);
            frame.getContentPane().add(new read());
            frame.setSize(1000, 1100);
            frame.setVisible(true);
            frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            frame.setResizable(false);
            Reader r = null;
            int nextarg = 0;
            boolean trace = false;
            int[] antennaList = null;
            boolean printTagMetaData = true;
            if (argv.length < 1)
                usage();
            if (argv[nextarg].equals("-v")) {
                trace = true;
                nextarg++;
            }
            // Create Reader object, connecting to physical device
            try {
                TagReadData[] tagReads;
                String readerURI = argv[nextarg];
                nextarg++;
                for (; nextarg < argv.length; nextarg++) {
                    String arg = argv[nextarg];
                    if (arg.equalsIgnoreCase("--ant")) {
                        if (antennaList != null) {
                            System.out.println("Duplicate argument: --ant specified

                                more than once ");

                                usage();
                            }
                            antennaList = parseAntennaList(argv, nextarg);

                            

                            nextarg++;
                        } else {
                            System.out.println("Argument " + argv[nextarg] + " is not

                                recognised ");

                                usage();
                            }
                        }
                        r = Reader.create(readerURI);
                        if (trace) {
                            setTrace(r, new String[] {
                                "on"
                            });
                        }
                        r.connect();
                        if (Reader.Region.UNSPEC == (Reader.Region) r.paramGet("/reader/region/id")) {
                            Reader.Region[] supportedRegions = (Reader.Region[])
                            r.paramGet(TMConstants.TMR_PARAM_REGION_SUPPORTEDREGIONS);

                            if (supportedRegions.length < 1) {
                                throw new Exception("Reader doesn't support any regions");
                            } else {
                                r.paramSet("/reader/region/id", supportedRegions[0]);
                            }
                        }
                        /**
                        * Checking the software version of Sargas.
                        * Antenna detection is supported on Sargas from the software versions

                        higher than 5.1.x.x.

                        * User has to pass antenna as an argument, if the antenna detection is

                        not supported on

                        * the respective reader firmware.
                        */
                        String model = r.paramGet("/reader/version/model").toString();
                        Boolean checkPort =
                            (Boolean) r.paramGet(TMConstants.TMR_PARAM_ANTENNA_CHECKPORT);
                        String swVersion = (String)
                        r.paramGet(TMConstants.TMR_PARAM_VERSION_SOFTWARE);
                        if ((model.equalsIgnoreCase("M6e Micro") || model.equalsIgnoreCase("M6e
                                Nano ") ||

                                (model.equalsIgnoreCase("Sargas") &&

                                    (swVersion.startsWith("5.1")))) && (false == checkPort) && antennaList == null) {
                                System.out.println("Module doesn't has antenna detection support,

                                    please provide antenna list ");
                                    r.destroy(); usage();
                                }
                                SimpleReadPlan plan = new SimpleReadPlan(antennaList, TagProtocol.GEN2,
                                    null, null, 1000);

                                

                                r.paramSet(TMConstants.TMR_PARAM_READ_PLAN, plan);
                                if (r.getClass().getName() == ("com.thingmagic.SerialReader")) {
                                    //System.out.println("TRUE ");

                                    // Set<TagReadData.TagMetadataFlag> setMetaDataFlags =
                                    EnumSet.of(TagReadData.TagMetadataFlag.ANTENNAID,
                                        TagReadData.TagMetadataFlag.FREQUENCY);
                                    Set < TagReadData.TagMetadataFlag > setMetaDataFlags = EnumSet.of(
                                        TagReadData.TagMetadataFlag.RSSI);
                                    r.paramSet(TMConstants.TMR_PARAM_READER_METADATA, setMetaDataFlags);
                                } else {
                                    // Configurable metadata param is not supported for llrp readers.
                                    printTagMetaData = true;
                                }
                                // Read tags
                                tagReads = r.read(5000);
                                // Print tag reads
                                for (TagReadData tr: tagReads) {
                                    s.y1 = tr.getRssi();
                                    System.out.println("EPC: " + tr.epcString());
                                    // Enable printTagMetaData to print meta data
                                    if (printTagMetaData) {
                                        //System.out.println("TRUE ");
                                        for (TagReadData.TagMetadataFlag metaData:

                                            TagReadData.TagMetadataFlag.values())

                                        {
                                            if (tr.metadataFlags.contains(metaData)) {
                                                switch (metaData) {
                                                    case ANTENNAID:
                                                        System.out.println("Antenna ID : " +

                                                            tr.getAntenna());

                                                        break;
                                                    case DATA:
                                                        // User should initialize Read Data
                                                        System.out.print("Data : ");
                                                        for (byte b: tr.getData()) {
                                                            System.out.printf("%02x ", b);
                                                        }
                                                        System.out.printf("\n");
                                                        break;
                                                    case FREQUENCY:
                                                        System.out.println("Frequency : " +

                                                            tr.getFrequency());

                                                        break;
                                                    case GPIO_STATUS:
                                                        Reader.GpioPin[] state = tr.getGpio();
                                                        for (Reader.GpioPin gp: state) {

                                                            

                                                            System.out.printf("GPIO Pin %d: %s\n",

                                                                gp.id, gp.high ? "High" : "Low");
                                                        }
                                                        break;
                                                    case PHASE:
                                                        System.out.println("Phase : " + tr.getPhase());
                                                        break;
                                                    case PROTOCOL:
                                                        System.out.println("Protocol : " +

                                                            tr.getTag().getProtocol());

                                                        break;
                                                    case READCOUNT:
                                                        System.out.println("ReadCount : " +

                                                            tr.getReadCount());

                                                        break;
                                                    case RSSI:
                                                        System.out.println("RSSI : " + tr.getRssi());
                                                        break;
                                                    case TIMESTAMP:
                                                        System.out.println("Timestamp : " + new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date(tr.getTime())));

                                                        break;
                                                    default:
                                                        break;
                                                }
                                                if (TagProtocol.GEN2 == tr.getTag().getProtocol()) {
                                                    Gen2.TagReadData gen2 = (Gen2.TagReadData)

                                                    (tr.prd);

                                                    switch (metaData) {
                                                        case GEN2_Q:
                                                            System.out.println("Gen2Q : " +

                                                                gen2.getGen2Q());

                                                            break;
                                                        case GEN2_LF:
                                                            System.out.println("Gen2LinkFrequency : " +

                                                                gen2.getGen2LF());

                                                            break;
                                                        case GEN2_TARGET:
                                                            System.out.println("Gen2Target : " +

                                                                gen2.getGen2Target());

                                                            break;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                // Shut down reader
                                r.destroy();
                            } catch (ReaderException re)

                            

                            {
                                System.out.println("Reader Exception : " + re.getMessage());
                            } catch (Exception re) {
                                System.out.println("Exception : " + re.getMessage());
                            }
                        }
                        static int[] parseAntennaList(String[] args, int argPosition) {
                            int[] antennaList = null;
                            try {
                                String argument = args[argPosition + 1];
                                String[] antennas = argument.split(",");
                                int i = 0;
                                antennaList = new int[antennas.length];
                                for (String ant: antennas) {
                                    antennaList[i] = Integer.parseInt(ant);
                                    i++;
                                }
                            } catch (IndexOutOfBoundsException ex) {
                                System.out.println("Missing argument after " + args[argPosition]);
                                usage();
                            } catch (Exception ex) {
                                System.out.println("Invalid argument at position " + (argPosition +

                                    1) + ". " + ex.getMessage());

                                usage();
                            }
                            return antennaList;
                        }
                    }
